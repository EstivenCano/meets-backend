generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                 Int       @id @default(autoincrement())
  email              String    @unique
  name               String?
  hashedRefreshToken String?
  resetToken         String?
  password           String?
  posts              Post[]
  profile            Profile?
  messages           Message[]
  comment            Comment[]
  followedBy         User[]    @relation("UserFollows")
  following          User[]    @relation("UserFollows")
  likes              Post[]    @relation("PostLiked")
  chats              Chat[]    @relation("ChatParticipants")
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String
  content   String?
  published Boolean   @default(false)
  viewCount Int       @default(0)
  authorId  Int?
  author    User?     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  likedBy   User[]    @relation("PostLiked")
  comments  Comment[]

  @@index([authorId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  authorId  Int?
  postId    Int?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([authorId])
  @@index([postId])
}

model Profile {
  id      Int     @id @default(autoincrement())
  picture String?
  cover   String?
  bio     String?
  userId  Int?    @unique
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PostLiked {
  A Int
  B Int

  @@unique([A, B], map: "_PostLiked_AB_unique")
  @@index([B], map: "_PostLiked_B_index")
  @@map("_PostLiked")
}

model UserFollows {
  A Int
  B Int

  @@unique([A, B], map: "_UserFollows_AB_unique")
  @@index([B], map: "_UserFollows_B_index")
  @@map("_UserFollows")
}

//Create a prisma model for chat an messages

model Chat {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  name         String    @unique
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
}

model ChatParticipants {
  A Int
  B Int

  @@unique([A, B], map: "_ChatParticipants_AB_unique")
  @@index([B], map: "_ChatParticipants_B_index")
  @@map("_ChatParticipants")
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  authorId  Int?
  chatId    Int?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chat      Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([authorId])
  @@index([chatId])
}
